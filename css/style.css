/* Define styles */
/*  */
/*  */
/*  */
/* there is a change */
/* when we utilize absolute properties measurement units, in combination of max && min */
/* than */
/* we utilize relative measurement properties, in specific width and height, and also we use max && min */
/*  */
/*  */
/*  */
/* [] attributes selector */
/* all elements starting with box + {st else}   */

div[class*="box"] {
  margin: 3rem auto;
  background-color: orangered;
}

/* Fixed Height && Width */
.box {
  width: 300px;
  height: 300px;
}

/* Dimensions not absolute units but */
/* relative units */
.box-flexible {
  /* fluid to 50% screen */
  width: 50%;
  /* if I give % 
  the parent container
  must have the size in pixels
  */
  /* 20% viewport height */
  height: 20vh;
}

/* instead of define height && width base */
/* define max && min points */
.box-flexible-2 {
  /* Absolute measurement units px */
  /* but */
  /* as I utilize max && min both in width && height  */
  /* it allows responsiveness */
  /* maximum width till it will grow */
  max-width: 960px;
  /* minimum width till it will shrink */
  min-width: 280px;
  /* maximum height till it will grow */
  max-height: 480px;
  /* minimum height till it will shrink */
  min-height: 280px;
  /* height always depend on the content */
  /* as the box is empty */
  /* it takes the reference the minimum height 280px */
}

/* Define Pre-established Widths */


.box-flexible-3 {
  max-width: 960px;
  min-width: 280px;
  max-height: 480px;
  min-height: 280px;
  /* Greater Hierarchy */
  /* over max && min */
  /* that are omitted */
  /* Defined width in pixels */
  width: 300px;
  /* Defined height in pixels */
  height: 300px;
}

.box-flexible-4 {
  max-width: 960px;
  min-width: 280px;
  max-height: 480px;
  min-height: 280px;
  /* Instead of establish in absolute measurement unit */
  /* I do it in relative ones  */
  /* like % && vh  */
  width: 50%;
  height: 20vh;
}

